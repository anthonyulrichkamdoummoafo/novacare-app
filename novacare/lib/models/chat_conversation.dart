class ChatMessage {
  final String id;
  final String conversationId;
  final String role; // 'user' or 'bot'
  final String text;
  final DateTime timestamp;
  final String? type; // 'start', 'symptom', etc.

  ChatMessage({
    required this.id,
    required this.conversationId,
    required this.role,
    required this.text,
    required this.timestamp,
    this.type,
  });

  factory ChatMessage.fromMap(Map<String, dynamic> map) {
    return ChatMessage(
      id: map['id']?.toString() ?? '',
      conversationId: map['conversation_id']?.toString() ?? '',
      role: map['role']?.toString() ?? '',
      text: map['text']?.toString() ?? '',
      timestamp: DateTime.parse(
          map['timestamp']?.toString() ?? DateTime.now().toIso8601String()),
      type: map['type']?.toString(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'conversation_id': conversationId,
      'role': role,
      'text': text,
      'timestamp': timestamp.toIso8601String(),
      'type': type,
    };
  }

  // Convert from local message format to ChatMessage
  factory ChatMessage.fromLocalMessage(
    Map<String, dynamic> localMessage,
    String conversationId,
  ) {
    return ChatMessage(
      id: '', // Will be generated by database
      conversationId: conversationId,
      role: localMessage['role'] ?? '',
      text: localMessage['text'] ?? '',
      timestamp: localMessage['timestamp'] ?? DateTime.now(),
      type: localMessage['type'],
    );
  }

  // Convert to local message format
  Map<String, dynamic> toLocalMessage() {
    return {
      'role': role,
      'text': text,
      'timestamp': timestamp,
      'type': type,
    };
  }

  @override
  String toString() {
    return 'ChatMessage(id: $id, conversationId: $conversationId, role: $role, text: $text, timestamp: $timestamp, type: $type)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ChatMessage &&
        other.id == id &&
        other.conversationId == conversationId &&
        other.role == role &&
        other.text == text &&
        other.timestamp == timestamp &&
        other.type == type;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        conversationId.hashCode ^
        role.hashCode ^
        text.hashCode ^
        timestamp.hashCode ^
        type.hashCode;
  }
}

class ChatConversation {
  final String id;
  final String userId;
  final String title;
  final DateTime createdAt;
  final DateTime updatedAt;
  final List<ChatMessage>? messages;

  ChatConversation({
    required this.id,
    required this.userId,
    required this.title,
    required this.createdAt,
    required this.updatedAt,
    this.messages,
  });

  factory ChatConversation.fromMap(Map<String, dynamic> map) {
    return ChatConversation(
      id: map['id']?.toString() ?? '',
      userId: map['user_id']?.toString() ?? '',
      title: map['title']?.toString() ?? '',
      createdAt: DateTime.parse(
          map['created_at']?.toString() ?? DateTime.now().toIso8601String()),
      updatedAt: DateTime.parse(
          map['updated_at']?.toString() ?? DateTime.now().toIso8601String()),
      messages: map['messages'] != null
          ? (map['messages'] as List)
              .map((m) => ChatMessage.fromMap(m))
              .toList()
          : null,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'user_id': userId,
      'title': title,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
    };
  }

  // Generate a title from the first user message
  static String generateTitle(List<Map<String, dynamic>> messages) {
    final firstUserMessage = messages.firstWhere(
      (msg) => msg['role'] == 'user',
      orElse: () => {'text': 'New Chat'},
    );
    
    String text = firstUserMessage['text'] ?? 'New Chat';
    if (text.length > 50) {
      text = '${text.substring(0, 50)}...';
    }
    return text;
  }

  @override
  String toString() {
    return 'ChatConversation(id: $id, userId: $userId, title: $title, createdAt: $createdAt, updatedAt: $updatedAt)';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is ChatConversation &&
        other.id == id &&
        other.userId == userId &&
        other.title == title &&
        other.createdAt == createdAt &&
        other.updatedAt == updatedAt;
  }

  @override
  int get hashCode {
    return id.hashCode ^
        userId.hashCode ^
        title.hashCode ^
        createdAt.hashCode ^
        updatedAt.hashCode;
  }
}
